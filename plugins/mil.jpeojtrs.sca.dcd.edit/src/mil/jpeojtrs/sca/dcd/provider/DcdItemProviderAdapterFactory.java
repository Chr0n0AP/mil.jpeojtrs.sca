/**
 * This file is protected by Copyright.
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html.
 */
// BEGIN GENERATED CODE
package mil.jpeojtrs.sca.dcd.provider;

import java.util.ArrayList;
import java.util.Collection;

import mil.jpeojtrs.sca.dcd.util.DcdAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DcdItemProviderAdapterFactory extends DcdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public DcdItemProviderAdapterFactory() {
		// END GENERATED CODE
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		// BEGIN GENERATED CODE
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdComponentPlacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdComponentPlacementItemProvider dcdComponentPlacementItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdComponentPlacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdComponentPlacementAdapter() {
		if (dcdComponentPlacementItemProvider == null) {
			dcdComponentPlacementItemProvider = new DcdComponentPlacementItemProvider(this);
		}

		return dcdComponentPlacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdComponentInstantiation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdComponentInstantiationItemProvider dcdComponentInstantiationItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdComponentInstantiation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdComponentInstantiationAdapter() {
		if (dcdComponentInstantiationItemProvider == null) {
			dcdComponentInstantiationItemProvider = new DcdComponentInstantiationItemProvider(this);
		}

		return dcdComponentInstantiationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdPartitioning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdPartitioningItemProvider dcdPartitioningItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdPartitioning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdPartitioningAdapter() {
		if (dcdPartitioningItemProvider == null) {
			dcdPartitioningItemProvider = new DcdPartitioningItemProvider(this);
		}

		return dcdPartitioningItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdComponentInstantiationRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdComponentInstantiationRefItemProvider dcdComponentInstantiationRefItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdComponentInstantiationRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdComponentInstantiationRefAdapter() {
		if (dcdComponentInstantiationRefItemProvider == null) {
			dcdComponentInstantiationRefItemProvider = new DcdComponentInstantiationRefItemProvider(this);
		}

		return dcdComponentInstantiationRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdConnectInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdConnectInterfaceItemProvider dcdConnectInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdConnectInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdConnectInterfaceAdapter() {
		if (dcdConnectInterfaceItemProvider == null) {
			dcdConnectInterfaceItemProvider = new DcdConnectInterfaceItemProvider(this);
		}

		return dcdConnectInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdUsesPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdUsesPortItemProvider dcdUsesPortItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdUsesPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdUsesPortAdapter() {
		if (dcdUsesPortItemProvider == null) {
			dcdUsesPortItemProvider = new DcdUsesPortItemProvider(this);
		}

		return dcdUsesPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdProvidesPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdProvidesPortItemProvider dcdProvidesPortItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdProvidesPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdProvidesPortAdapter() {
		if (dcdProvidesPortItemProvider == null) {
			dcdProvidesPortItemProvider = new DcdProvidesPortItemProvider(this);
		}

		return dcdProvidesPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdConnections} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdConnectionsItemProvider dcdConnectionsItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdConnections}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdConnectionsAdapter() {
		if (dcdConnectionsItemProvider == null) {
			dcdConnectionsItemProvider = new DcdConnectionsItemProvider(this);
		}

		return dcdConnectionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.CompositePartOfDevice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositePartOfDeviceItemProvider compositePartOfDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.CompositePartOfDevice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositePartOfDeviceAdapter() {
		if (compositePartOfDeviceItemProvider == null) {
			compositePartOfDeviceItemProvider = new CompositePartOfDeviceItemProvider(this);
		}

		return compositePartOfDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DcdDocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DcdDocumentRootItemProvider dcdDocumentRootItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DcdDocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDcdDocumentRootAdapter() {
		if (dcdDocumentRootItemProvider == null) {
			dcdDocumentRootItemProvider = new DcdDocumentRootItemProvider(this);
		}

		return dcdDocumentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DeployOnDevice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployOnDeviceItemProvider deployOnDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DeployOnDevice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployOnDeviceAdapter() {
		if (deployOnDeviceItemProvider == null) {
			deployOnDeviceItemProvider = new DeployOnDeviceItemProvider(this);
		}

		return deployOnDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DeviceConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceConfigurationItemProvider deviceConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DeviceConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceConfigurationAdapter() {
		if (deviceConfigurationItemProvider == null) {
			deviceConfigurationItemProvider = new DeviceConfigurationItemProvider(this);
		}

		return deviceConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DeviceManagerSoftPkg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceManagerSoftPkgItemProvider deviceManagerSoftPkgItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DeviceManagerSoftPkg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceManagerSoftPkgAdapter() {
		if (deviceManagerSoftPkgItemProvider == null) {
			deviceManagerSoftPkgItemProvider = new DeviceManagerSoftPkgItemProvider(this);
		}

		return deviceManagerSoftPkgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DevicePkgFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevicePkgFileItemProvider devicePkgFileItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DevicePkgFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDevicePkgFileAdapter() {
		if (devicePkgFileItemProvider == null) {
			devicePkgFileItemProvider = new DevicePkgFileItemProvider(this);
		}

		return devicePkgFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.DomainManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainManagerItemProvider domainManagerItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.DomainManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainManagerAdapter() {
		if (domainManagerItemProvider == null) {
			domainManagerItemProvider = new DomainManagerItemProvider(this);
		}

		return domainManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.FileSystemName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileSystemNameItemProvider fileSystemNameItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.FileSystemName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileSystemNameAdapter() {
		if (fileSystemNameItemProvider == null) {
			fileSystemNameItemProvider = new FileSystemNameItemProvider(this);
		}

		return fileSystemNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.dcd.FileSystemNames} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileSystemNamesItemProvider fileSystemNamesItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.dcd.FileSystemNames}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileSystemNamesAdapter() {
		if (fileSystemNamesItemProvider == null) {
			fileSystemNamesItemProvider = new FileSystemNamesItemProvider(this);
		}

		return fileSystemNamesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class< ? >) || (((Class< ? >) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (dcdComponentPlacementItemProvider != null)
			dcdComponentPlacementItemProvider.dispose();
		if (dcdComponentInstantiationItemProvider != null)
			dcdComponentInstantiationItemProvider.dispose();
		if (dcdPartitioningItemProvider != null)
			dcdPartitioningItemProvider.dispose();
		if (dcdComponentInstantiationRefItemProvider != null)
			dcdComponentInstantiationRefItemProvider.dispose();
		if (dcdConnectInterfaceItemProvider != null)
			dcdConnectInterfaceItemProvider.dispose();
		if (dcdUsesPortItemProvider != null)
			dcdUsesPortItemProvider.dispose();
		if (dcdProvidesPortItemProvider != null)
			dcdProvidesPortItemProvider.dispose();
		if (dcdConnectionsItemProvider != null)
			dcdConnectionsItemProvider.dispose();
		if (compositePartOfDeviceItemProvider != null)
			compositePartOfDeviceItemProvider.dispose();
		if (dcdDocumentRootItemProvider != null)
			dcdDocumentRootItemProvider.dispose();
		if (deployOnDeviceItemProvider != null)
			deployOnDeviceItemProvider.dispose();
		if (deviceConfigurationItemProvider != null)
			deviceConfigurationItemProvider.dispose();
		if (deviceManagerSoftPkgItemProvider != null)
			deviceManagerSoftPkgItemProvider.dispose();
		if (devicePkgFileItemProvider != null)
			devicePkgFileItemProvider.dispose();
		if (domainManagerItemProvider != null)
			domainManagerItemProvider.dispose();
		if (fileSystemNameItemProvider != null)
			fileSystemNameItemProvider.dispose();
		if (fileSystemNamesItemProvider != null)
			fileSystemNamesItemProvider.dispose();
	}

}
